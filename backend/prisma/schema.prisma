// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int            @id @default(autoincrement())
  username      String         @unique
  email         String         @unique
  password      String
  role          Role           @default(CUSTOMER)
  orders        Order[]
  loyaltyPoints LoyaltyPoints?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model MenuItem {
  id             Int         @id @default(autoincrement())
  sumupProductId String?     // Add this field to track SumUp product ID
  name           String
  description    String
  price          Float
  category       String
  imageUrl       String
  isAvailable    Boolean     @default(true)
  orderItems     OrderItem[]
}

model Order {
  id                Int         @id @default(autoincrement())
  userId            Int?
  user              User?       @relation(fields: [userId], references: [id])
  total             Float
  status            OrderStatus
  items             OrderItem[]
  sumupCheckoutId   String?     // SumUp checkout reference
  sumupOrderId      String?     // If SumUp has a separate order ID
  estimatedReadyTime DateTime?  // When business estimates order will be ready
  readyAt           DateTime?   // When order was actually marked ready
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
}

model OrderItem {
  id            Int      @id @default(autoincrement())
  orderId       Int
  order         Order    @relation(fields: [orderId], references: [id])
  menuItemId    Int
  menuItem      MenuItem @relation(fields: [menuItemId], references: [id])
  quantity      Int
  price         Float
  customizations Json?    // Add customizations as a JSON field
}

model LoyaltyPoints {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int      @unique
  points    Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Role {
  ADMIN
  STAFF
  CUSTOMER
}

enum Category {
  BURGER
  SIDE
  DRINK
  DESSERT
}

enum OrderStatus {
  PENDING        // Initial state, just created
  PAID           // Payment confirmed but not yet confirmed by business
  CONFIRMED      // Business confirmed, in preparation
  PREPARING      // In preparation (optional)
  READY          // Ready for collection
  DELIVERED      // Customer picked up order
  CANCELLED      // Order was cancelled
  PAYMENT_FAILED // Payment processing failed
}
