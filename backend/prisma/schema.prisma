// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int            @id @default(autoincrement())
  email         String         @unique
  password      String
  name          String
  dateOfBirth   DateTime
  address       String
  phoneNumber   String
  acceptedTerms Boolean        @default(false)
  role          Role           @default(CUSTOMER)
  orders        Order[]
  loyaltyPoints LoyaltyPoints?
  pointsTransactions PointsTransaction[]
  notifications Notification[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model MenuItem {
  id                 Int      @id @default(autoincrement())
  name               String
  description        String?
  price              Float
  category           String   // BURGER, SIDE, DRINK, DESSERT
  imageUrl           String?
  isAvailable        Boolean  @default(true)
  sumupProductId     String?  @unique // Used to link to SumUp catalog
  orderItems         OrderItem[]
  customizationCategories MenuItemCustomizationCategory[] // Relation to join table for old category-based linking
  linkedCustomizationOptions MenuItemCustomizationOption[] // For direct option linking (NEW)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Order {
  id                Int         @id @default(autoincrement())
  userId            Int?
  user              User?       @relation(fields: [userId], references: [id])
  total             Float
  status            OrderStatus
  items             OrderItem[]
  sumupCheckoutId   String?     // SumUp checkout reference
  sumupOrderId      String?     // If SumUp has a separate order ID
  estimatedReadyTime DateTime?  // When business estimates order will be ready
  readyAt           DateTime?   // When order was actually marked ready
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  pointsTransactions PointsTransaction[]
}

model OrderItem {
  id            Int      @id @default(autoincrement())
  orderId       Int
  order         Order    @relation(fields: [orderId], references: [id])
  menuItemId    Int
  menuItem      MenuItem @relation(fields: [menuItemId], references: [id])
  quantity      Int
  price         Float
  customizations Json?    // Add customizations as a JSON field
}

model LoyaltyPoints {
  id                 Int      @id @default(autoincrement())
  user               User     @relation(fields: [userId], references: [id])
  userId             Int      @unique
  points             Int      @default(0)
  tier               String   @default("BRONZE") // BRONZE, SILVER, GOLD
  registrationDate   DateTime @default(now()) // Date of loyalty enrollment / first points record
  lastPointsReset    DateTime? // When points were last reset (e.g. due to 90-day expiry)
  totalSpentThisYear Float    @default(0) // For birthday reward tracking
  birthdayRewardSent Boolean  @default(false)
  pointsTransactions PointsTransaction[] // History of all points changes
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
}

model PointsTransaction {
  id        Int      @id @default(autoincrement())
  
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  
  loyaltyPoints LoyaltyPoints @relation(fields: [loyaltyPointsId], references: [id])
  loyaltyPointsId Int

  points    Int      // positive for earned, negative for spent/expired
  reason    String   // e.g., "ORDER_EARNED", "BIRTHDAY_BONUS", "POINTS_REDEEMED", "POINTS_EXPIRED"
  
  order     Order?   @relation(fields: [orderId], references: [id]) // Optional: link to an order if points are order-related
  orderId   Int?     // Optional: foreign key for Order

  details   String?  // Optional: e.g. "Order #123", "Redeemed for Free Burger", "Monthly points expiry"
  createdAt DateTime @default(now())
}

// Join table for MenuItem and CustomizationCategory (Many-to-Many)
model MenuItemCustomizationCategory {
  menuItem    MenuItem             @relation(fields: [menuItemId], references: [id])
  menuItemId  Int
  category    CustomizationCategory @relation(fields: [categoryId], references: [id])
  categoryId  Int

  @@id([menuItemId, categoryId])
}

// New Model: CustomizationCategory
// Represents a type of customization, e.g., "Extras", "Sauces", "Toppings"
model CustomizationCategory {
  id          Int      @id @default(autoincrement())
  name        String   @unique // e.g., "Extras", "Sauces"
  options     CustomizationOption[]
  menuItems   MenuItemCustomizationCategory[] // Relation to join table

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

// New Model: CustomizationOption
// Represents a specific choice within a category, e.g., "Extra Patty" (under "Extras")
model CustomizationOption {
  id          Int      @id @default(autoincrement())
  name        String   // e.g., "Extra Patty", "Ketchup"
  price       Float    // Price for this specific option
  categoryId  Int      // Foreign key to CustomizationCategory
  category    CustomizationCategory @relation(fields: [categoryId], references: [id])
  menuItems   MenuItemCustomizationOption[] // For direct option linking (NEW)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  
  @@unique([name, categoryId])
  @@index([categoryId])
}

// New join table for MenuItem and CustomizationOption (Many-to-Many for direct linking)
model MenuItemCustomizationOption {
  menuItem             MenuItem            @relation(fields: [menuItemId], references: [id])
  menuItemId           Int
  customizationOption  CustomizationOption @relation(fields: [customizationOptionId], references: [id])
  customizationOptionId Int

  @@id([menuItemId, customizationOptionId])
}

model Notification {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  type      String   // "RATING_REQUEST", "BIRTHDAY_REWARD", "ORDER_UPDATE"
  title     String
  message   String
  isRead    Boolean  @default(false)
  metadata  Json?    // Additional data like orderId, etc.
  scheduledFor DateTime?
  sentAt    DateTime?
  createdAt DateTime @default(now())
}

enum Role {
  ADMIN
  STAFF
  CUSTOMER
}

enum Category {
  BURGER
  SIDE
  DRINK
  DESSERT
}

enum OrderStatus {
  AWAITING_PAYMENT // Newly created order, waiting for payment processing
  PAYMENT_CONFIRMED // Payment confirmed by SumUp, ready for business to process
  CONFIRMED      // Business confirmed, in preparation
  PREPARING      // In preparation (optional)
  READY          // Ready for collection
  DELIVERED      // Customer picked up order
  CANCELLED      // Order was cancelled
  PAYMENT_FAILED // Payment processing failed
}
